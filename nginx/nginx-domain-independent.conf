events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    upstream app {
        server app:3000;
        keepalive 32;
    }
    
    # HTTP Server (Always listens, redirects to HTTPS if SSL is enabled)
    server {
        listen 80;
        server_name _;  # Accept any domain/IP
        
        # Health check endpoint (always available on HTTP)
        location /health {
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Check if SSL is enabled via app
        location /ssl-check {
            proxy_pass http://app/api/ssl-status;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Serve application (will handle SSL redirect internally if needed)
        location / {
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # API endpoints
        location /api/ {
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
        }
        
        # Socket.io
        location /socket.io/ {
            proxy_pass http://app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # HTTPS Server (Commented out - uncomment when SSL certificates are available)
    # To enable HTTPS:
    # 1. Add your SSL certificates to nginx/ssl/fullchain.pem and nginx/ssl/privkey.pem
    # 2. Uncomment the server block below
    # 3. Restart nginx: docker compose -f docker-compose.prod.yml restart nginx
    
    #server {
    #    listen 443 ssl;
    #    http2 on;
    #    server_name _;  # Accept any domain/IP
    #    
    #    # SSL Configuration
    #    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    #    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    #    
    #    # SSL Settings
    #    ssl_protocols TLSv1.2 TLSv1.3;
    #    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #    ssl_prefer_server_ciphers off;
    #    ssl_session_cache shared:SSL:10m;
    #    ssl_session_timeout 10m;
    #    
    #    # Security headers
    #    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #    add_header X-Frame-Options DENY always;
    #    add_header X-Content-Type-Options nosniff always;
    #    add_header X-XSS-Protection "1; mode=block" always;
    #    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    #    
    #    # Application routes
    #    location / {
    #        proxy_pass http://app;
    #        proxy_set_header Host $host;
    #        proxy_set_header X-Real-IP $remote_addr;
    #        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #        proxy_set_header X-Forwarded-Proto $scheme;
    #        proxy_set_header X-Forwarded-Host $host;
    #        
    #        # WebSocket support
    #        proxy_http_version 1.1;
    #        proxy_set_header Upgrade $http_upgrade;
    #        proxy_set_header Connection $connection_upgrade;
    #        
    #        # Timeouts
    #        proxy_connect_timeout 60s;
    #        proxy_send_timeout 60s;
    #        proxy_read_timeout 60s;
    #    }
    #    
    #    # API endpoints
    #    location /api/ {
    #        proxy_pass http://app;
    #        proxy_set_header Host $host;
    #        proxy_set_header X-Real-IP $remote_addr;
    #        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #        proxy_set_header X-Forwarded-Proto $scheme;
    #        proxy_set_header X-Forwarded-Host $host;
    #    }
    #    
    #    # Socket.io
    #    location /socket.io/ {
    #        proxy_pass http://app;
    #        proxy_http_version 1.1;
    #        proxy_set_header Upgrade $http_upgrade;
    #        proxy_set_header Connection "upgrade";
    #        proxy_set_header Host $host;
    #        proxy_set_header X-Real-IP $remote_addr;
    #        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #        proxy_set_header X-Forwarded-Proto $scheme;
    #    }
    #}
    
    # Connection upgrade map for WebSockets
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
}
