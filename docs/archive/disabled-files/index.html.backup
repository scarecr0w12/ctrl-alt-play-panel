<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Panel Dashboard - Ctrl-Alt-Play</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .dashboard-container {
            background: linear-gradient(135deg, #1e293b 0%, #334155 50%, #1e293b 100%);
        }
        .glass-card {
            background: rgba(255, 255, 255, 0.05);
            -webkit-backdrop-filter: blur(15px);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .feature-card {
            transition: all 0.3s ease;
        }
        .feature-card:hover {
            transform: translateY(-2px);
            background: rgba(255, 255, 255, 0.08);
        }
        .nav-header {
            background: rgba(15, 23, 42, 0.95);
            -webkit-backdrop-filter: blur(20px);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
    </style>
</head>
<body class="bg-gray-900 text-white min-h-screen dashboard-container">
    <!-- Header -->
    <div class="nav-header sticky top-0 z-50">
        <div class="max-w-7xl mx-auto px-6 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="w-12 h-12 bg-blue-600 rounded-xl flex items-center justify-center">
                        <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                        </svg>
                    </div>
                    <div>
                        <h1 class="text-2xl font-bold">Ctrl-Alt-Play Panel</h1>
                        <p class="text-gray-400">Professional Game Server Management</p>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="text-sm text-gray-400">
                        <span id="current-time"></span>
                    </div>
                    <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse" title="Server Online"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Dashboard -->
    <div class="max-w-7xl mx-auto px-6 py-8">
        <!-- Welcome Section -->
        <div class="glass-card rounded-2xl p-8 mb-8">
            <div class="text-center">
                <h2 class="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent">
                    Welcome to Your Game Panel
                </h2>
                <p class="text-xl text-gray-300 mb-6">
                    Inspired by Pelican Panel's design with modern features and intuitive interface
                </p>
                <div class="flex justify-center space-x-6 text-sm text-gray-400">
                    <div class="flex items-center space-x-2">
                        <div class="w-2 h-2 bg-green-400 rounded-full"></div>
                        <span>Real-time Console</span>
                    </div>
                    <div class="flex items-center space-x-2">
                        <div class="w-2 h-2 bg-blue-400 rounded-full"></div>
                        <span>File Management</span>
                    </div>
                    <div class="flex items-center space-x-2">
                        <div class="w-2 h-2 bg-purple-400 rounded-full"></div>
                        <span>Monaco Code Editor</span>
                    </div>
                    <div class="flex items-center space-x-2">
                        <div class="w-2 h-2 bg-yellow-400 rounded-full"></div>
                        <span>WebSocket Communication</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Core Features -->
        <div class="mb-8">
            <h3 class="text-2xl font-bold mb-6">Core Features</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Console Feature -->
                <a href="/console.html" class="feature-card glass-card rounded-xl p-6 block">
                    <div class="text-center">
                        <div class="w-16 h-16 bg-green-600 rounded-xl flex items-center justify-center mx-auto mb-4">
                            <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                            </svg>
                        </div>
                        <h4 class="text-xl font-semibold mb-2">Real-time Console</h4>
                        <p class="text-gray-400 text-sm mb-4">
                            Interactive terminal with WebSocket communication, server monitoring, and power controls
                        </p>
                        <div class="flex justify-center space-x-2">
                            <span class="px-2 py-1 bg-green-600/20 text-green-400 rounded text-xs">xterm.js</span>
                            <span class="px-2 py-1 bg-blue-600/20 text-blue-400 rounded text-xs">WebSocket</span>
                            <span class="px-2 py-1 bg-purple-600/20 text-purple-400 rounded text-xs">Charts</span>
                        </div>
                    </div>
                </a>

                <!-- File Manager Feature -->
                <a href="/files.html" class="feature-card glass-card rounded-xl p-6 block">
                    <div class="text-center">
                        <div class="w-16 h-16 bg-blue-600 rounded-xl flex items-center justify-center mx-auto mb-4">
                            <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4l2 2h4a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd"/>
                            </svg>
                        </div>
                        <h4 class="text-xl font-semibold mb-2">File Management</h4>
                        <p class="text-gray-400 text-sm mb-4">
                            Complete file browser with Monaco editor, upload/download, and directory operations
                        </p>
                        <div class="flex justify-center space-x-2">
                            <span class="px-2 py-1 bg-blue-600/20 text-blue-400 rounded text-xs">Monaco</span>
                            <span class="px-2 py-1 bg-green-600/20 text-green-400 rounded text-xs">REST API</span>
                            <span class="px-2 py-1 bg-yellow-600/20 text-yellow-400 rounded text-xs">Upload</span>
                        </div>
                    </div>
                </a>

                <!-- API Documentation -->
                <div class="feature-card glass-card rounded-xl p-6">
                    <div class="text-center">
                        <div class="w-16 h-16 bg-purple-600 rounded-xl flex items-center justify-center mx-auto mb-4">
                            <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"/>
                            </svg>
                        </div>
                        <h4 class="text-xl font-semibold mb-2">REST API</h4>
                        <p class="text-gray-400 text-sm mb-4">
                            Comprehensive API endpoints for monitoring, file operations, and server management
                        </p>
                        <div class="flex justify-center space-x-2">
                            <span class="px-2 py-1 bg-purple-600/20 text-purple-400 rounded text-xs">Express</span>
                            <span class="px-2 py-1 bg-red-600/20 text-red-400 rounded text-xs">TypeScript</span>
                            <span class="px-2 py-1 bg-gray-600/20 text-gray-400 rounded text-xs">JSON</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Stats -->
        <div class="mb-8">
            <h3 class="text-2xl font-bold mb-6">System Overview</h3>
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div class="glass-card rounded-xl p-6 text-center">
                    <div class="text-3xl font-bold text-green-400" id="server-uptime">00:00:00</div>
                    <div class="text-sm text-gray-400">Server Uptime</div>
                </div>
                <div class="glass-card rounded-xl p-6 text-center">
                    <div class="text-3xl font-bold text-blue-400" id="memory-usage">0%</div>
                    <div class="text-sm text-gray-400">Memory Usage</div>
                </div>
                <div class="glass-card rounded-xl p-6 text-center">
                    <div class="text-3xl font-bold text-purple-400" id="cpu-usage">0%</div>
                    <div class="text-sm text-gray-400">CPU Usage</div>
                </div>
                <div class="glass-card rounded-xl p-6 text-center">
                    <div class="text-3xl font-bold text-yellow-400" id="connections">0</div>
                    <div class="text-sm text-gray-400">Active Connections</div>
                </div>
            </div>
        </div>

        <!-- Development Information -->
        <div class="glass-card rounded-xl p-6">
            <h3 class="text-xl font-bold mb-4">Implementation Details</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <h4 class="font-semibold mb-3 text-blue-400">Backend Technologies</h4>
                    <ul class="space-y-2 text-sm text-gray-300">
                        <li>• Node.js with Express.js framework</li>
                        <li>• TypeScript for type safety</li>
                        <li>• WebSocket server for real-time communication</li>
                        <li>• RESTful API design with proper error handling</li>
                        <li>• File system operations with security validation</li>
                        <li>• Compression, CORS, and security middleware</li>
                    </ul>
                </div>
                <div>
                    <h4 class="font-semibold mb-3 text-green-400">Frontend Features</h4>
                    <ul class="space-y-2 text-sm text-gray-300">
                        <li>• Pelican Panel-inspired UI/UX design</li>
                        <li>• Monaco Editor for code editing</li>
                        <li>• xterm.js for terminal interface</li>
                        <li>• Chart.js for real-time monitoring</li>
                        <li>• TailwindCSS with glass morphism effects</li>
                        <li>• Responsive design with accessibility features</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Update current time
        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString();
            document.getElementById('current-time').textContent = timeString;
        }

        // Mock stats updates
        let startTime = Date.now();
        function updateStats() {
            const uptime = Date.now() - startTime;
            const hours = Math.floor(uptime / 3600000);
            const minutes = Math.floor((uptime % 3600000) / 60000);
            const seconds = Math.floor((uptime % 60000) / 1000);
            
            document.getElementById('server-uptime').textContent = 
                `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            // Simulate realistic usage
            const memUsage = (Math.sin(Date.now() / 10000) * 10 + 45).toFixed(1);
            const cpuUsage = (Math.sin(Date.now() / 8000) * 15 + 25).toFixed(1);
            const connections = Math.floor(Math.sin(Date.now() / 15000) * 3 + 5);
            
            document.getElementById('memory-usage').textContent = memUsage + '%';
            document.getElementById('cpu-usage').textContent = cpuUsage + '%';
            document.getElementById('connections').textContent = connections;
        }

        // Initialize
        updateTime();
        updateStats();
        setInterval(updateTime, 1000);
        setInterval(updateStats, 2000);
    </script>
</body>
</html>
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header h1 {
            color: white;
            font-size: 3rem;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .header p {
            color: rgba(255, 255, 255, 0.9);
            font-size: 1.2rem;
            margin-bottom: 1rem;
        }

        .status-badge {
            display: inline-block;
            background: #4CAF50;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 25px;
            font-weight: bold;
            margin: 0.5rem;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .feature-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.3);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }

        .feature-card h3 {
            color: #667eea;
            margin-bottom: 1rem;
            font-size: 1.4rem;
        }

        .feature-card ul {
            list-style: none;
            padding-left: 0;
        }

        .feature-card li {
            margin-bottom: 0.5rem;
            padding-left: 1.5rem;
            position: relative;
        }

        .feature-card li:before {
            content: "✓";
            position: absolute;
            left: 0;
            color: #4CAF50;
            font-weight: bold;
        }

        .api-section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .api-section h2 {
            color: #667eea;
            margin-bottom: 1rem;
            text-align: center;
        }

        .endpoint {
            background: #f8f9fa;
            border-left: 4px solid #667eea;
            padding: 1rem;
            margin: 1rem 0;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
        }

        .endpoint .method {
            color: #28a745;
            font-weight: bold;
            margin-right: 1rem;
        }

        .endpoint .url {
            color: #007bff;
        }

        .button {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            margin: 0.5rem;
        }

        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .result {
            background: #1e1e1e;
            color: #f8f8f2;
            padding: 1rem;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            margin-top: 1rem;
            max-height: 300px;
            overflow-y: auto;
        }

        .footer {
            text-align: center;
            color: rgba(255, 255, 255, 0.8);
            margin-top: 3rem;
        }

        .competitive-section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .comparison-table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }

        .comparison-table th,
        .comparison-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .comparison-table th {
            background: #667eea;
            color: white;
        }

        .comparison-table tr:nth-child(even) {
            background: #f8f9fa;
        }

        .check-mark {
            color: #4CAF50;
            font-weight: bold;
        }

        .x-mark {
            color: #f44336;
            font-weight: bold;
        }

        .cost-highlight {
            background: #4CAF50;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 5px;
            font-weight: bold;
        }

        .center-text {
            text-align: center;
            margin-bottom: 1rem;
        }

        .center-text-large {
            text-align: center;
            margin-bottom: 2rem;
        }

        .hidden {
            display: none;
        }

        .description {
            color: #6b7280;
            font-size: 0.9em;
            margin-top: 5px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .status-indicator {
            color: #10b981;
        }

            </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎮 Ctrl-Alt-Play Panel</h1>
            <p>Next-Generation Game Server Management Platform</p>
            <div class="status-badge" id="statusBadge">🟢 Backend Online</div>
        </div>

        <div class="features-grid">
            <div class="feature-card">
                <h3>📊 Advanced Monitoring</h3>
                <ul>
                    <li>Real-time server metrics</li>
                    <li>Historical performance data</li>
                    <li>Custom alert thresholds</li>
                    <li>PNG graph generation</li>
                    <li>Multi-node aggregation</li>
                </ul>
            </div>

            <div class="feature-card">
                <h3>🎮 Steam Workshop Integration</h3>
                <ul>
                    <li>Browse Workshop items</li>
                    <li>One-click mod installation</li>
                    <li>Collection support</li>
                    <li>Installation tracking</li>
                    <li>Automatic metadata caching</li>
                </ul>
            </div>

            <div class="feature-card">
                <h3>🚀 Enterprise Features</h3>
                <ul>
                    <li>Multi-server management</li>
                    <li>Load balancing ready</li>
                    <li>Voice server integration</li>
                    <li>Automated patching</li>
                    <li>Billing system ready</li>
                </ul>
            </div>

            <div class="feature-card">
                <h3>🔒 Security & Performance</h3>
                <ul>
                    <li>JWT authentication</li>
                    <li>Rate limiting</li>
                    <li>Encrypted communication</li>
                    <li>Audit logging</li>
                    <li>Redis caching</li>
                </ul>
            </div>
        </div>

        <div class="competitive-section">
            <h2>🏆 Competitive Advantage</h2>
            <p class="center-text">Why choose Ctrl-Alt-Play over existing solutions?</p>

            <table class="comparison-table">
                <thead>
                    <tr>
                        <th>Feature</th>
                        <th>Pterodactyl</th>
                        <th>Pelican</th>
                        <th>TCAdmin2</th>
                        <th>Ctrl-Alt-Play</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Advanced Monitoring</td>
                        <td>Basic</td>
                        <td>Basic</td>
                        <td class="check-mark">✓</td>
                        <td class="check-mark">✓</td>
                    </tr>
                    <tr>
                        <td>Steam Workshop</td>
                        <td class="x-mark">✗</td>
                        <td class="x-mark">✗</td>
                        <td class="check-mark">✓</td>
                        <td class="check-mark">✓</td>
                    </tr>
                    <tr>
                        <td>Voice Server Integration</td>
                        <td class="x-mark">✗</td>
                        <td class="x-mark">✗</td>
                        <td class="check-mark">✓</td>
                        <td class="check-mark">✓ (Planned)</td>
                    </tr>
                    <tr>
                        <td>Load Balancing</td>
                        <td>Basic</td>
                        <td>Basic</td>
                        <td class="check-mark">✓</td>
                        <td class="check-mark">✓ (Planned)</td>
                    </tr>
                    <tr>
                        <td>Billing Integration</td>
                        <td>Third-party</td>
                        <td>Third-party</td>
                        <td class="check-mark">✓</td>
                        <td class="check-mark">✓ (Planned)</td>
                    </tr>
                    <tr>
                        <td><strong>Monthly Cost</strong></td>
                        <td><span class="cost-highlight">FREE</span></td>
                        <td><span class="cost-highlight">FREE</span></td>
                        <td>$15-5000</td>
                        <td><span class="cost-highlight">FREE</span></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="api-section">
            <h2>🔗 API Endpoints</h2>
            <p class="center-text-large">Test our live API endpoints below:</p>

            <div class="endpoint">
                <span class="method">GET</span>
                <span class="url">/health</span>
                <button class="button" onclick="testEndpoint('/health')">Test Health Check</button>
                <div class="description">Public endpoint - Returns system status and uptime</div>
            </div>

            <div class="endpoint">
                <span class="method">GET</span>
                <span class="url">/api/info</span>
                <button class="button" onclick="testEndpoint('/api/info')">Get Panel Info</button>
                <div class="description">Public endpoint - Panel information and available features</div>
            </div>

            <div class="endpoint">
                <span class="method">GET</span>
                <span class="url">/api/workshop/search?gameId=570</span>
                <button class="button" onclick="testEndpoint('/api/workshop/search?gameId=570')">Browse Workshop (Requires Auth)</button>
                <div class="description">Protected endpoint - Search Steam Workshop items</div>
            </div>

            <div class="endpoint">
                <span class="method">GET</span>
                <span class="url">/api/monitoring/servers/demo/current</span>
                <button class="button" onclick="testEndpoint('/api/monitoring/servers/demo/current')">Get Server Metrics (Requires Auth)</button>
                <div class="description">Protected endpoint - Get current server status and metrics</div>
            </div>

            <div id="apiResult" class="result hidden"></div>
        </div>

        <div class="api-section">
            <h2>🔐 Authentication Demo</h2>
            <p class="center-text">This panel uses JWT authentication. In a production environment, you would register/login to get a token.</p>
            <div class="endpoint">
                <span class="method">Note:</span>
                <span class="url">Protected endpoints require valid JWT tokens</span>
                <div class="description">The panel implements proper security with role-based access control</div>
            </div>
        </div>

        <div class="footer">
            <p>Built with ❤️ by the Ctrl-Alt-Play team | Powered by Node.js, TypeScript, and PostgreSQL</p>
            <p>Open Source • Modern Architecture • Enterprise Ready</p>
        </div>
    </div>

    <script>
        // Check backend status on load
        async function checkStatus() {
            try {
                const response = await fetch('/health');
                const data = await response.json();

                if (data.status === 'OK') {
                    document.getElementById('statusBadge').innerHTML = '🟢 Backend Online';
                    document.getElementById('statusBadge').style.background = '#4CAF50';
                } else {
                    throw new Error('Backend not healthy');
                }
            } catch (error) {
                document.getElementById('statusBadge').innerHTML = '🔴 Backend Offline';
                document.getElementById('statusBadge').style.background = '#f44336';
            }
        }

        // Test API endpoints
        async function testEndpoint(endpoint) {
            const resultDiv = document.getElementById('apiResult');
            resultDiv.style.display = 'block';
            resultDiv.textContent = 'Loading...';

            try {
                const response = await fetch(endpoint);
                const data = await response.json();

                if (response.ok) {
                    resultDiv.textContent = JSON.stringify(data, null, 2);
                    resultDiv.style.borderLeft = '4px solid #4CAF50';
                } else {
                    // Show authentication errors in a user-friendly way
                    if (data.message === 'Access token required') {
                        resultDiv.textContent = `🔐 Authentication Required\n\nThis endpoint requires a valid JWT token.\nIn a production environment, you would:\n1. Register/Login to get a token\n2. Include the token in the Authorization header\n\nRaw Response:\n${JSON.stringify(data, null, 2)}`;
                    } else {
                        resultDiv.textContent = JSON.stringify(data, null, 2);
                    }
                    resultDiv.style.borderLeft = '4px solid #f44336';
                }
            } catch (error) {
                resultDiv.textContent = `Error: ${error.message}`;
                resultDiv.style.borderLeft = '4px solid #f44336';
            }
        }

        // Initialize
        checkStatus();

        // Auto-refresh status every 30 seconds
        setInterval(checkStatus, 30000);
    </script>
</body>
</html>
            border-radius: 8px;
            margin: 20px 0;
        }
        .endpoint {
            background: white;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
            border-left: 4px solid #2563eb;
        }
        .method {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
            color: white;
            margin-right: 10px;
        }
        .method.get { background: #10b981; }
        .method.post { background: #3b82f6; }
        .method.put { background: #f59e0b; }
        .method.delete { background: #ef4444; }
        .footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
            color: #6b7280;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="hero">
            <h1>🎮 Game Panel</h1>
            <p>Comprehensive NodeJS-based game server management panel</p>
            <p><strong>Status:</strong> <span style="color: #10b981;">●</span> Running</p>
        </div>

        <div class="features">
            <div class="feature">
                <h3>🐳 Docker Integration</h3>
                <p>Containerized game servers for isolation and resource management</p>
            </div>
            <div class="feature">
                <h3>🏗️ Agent-Based</h3>
                <p>Distributed system with remote agents for managing multiple nodes</p>
            </div>
            <div class="feature">
                <h3>📊 Real-time Monitoring</h3>
                <p>Live server statistics, console output, and resource usage</p>
            </div>
            <div class="feature">
                <h3>👥 User Management</h3>
                <p>Role-based access control with admin, moderator, and user roles</p>
            </div>
        </div>

        <div class="api-section">
            <h2>API Endpoints</h2>
            <p>The Game Panel provides a comprehensive REST API for managing game servers:</p>

            <div class="endpoint">
                <span class="method post">POST</span>
                <code>/api/auth/login</code>
                <p>Authenticate user and receive JWT token</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span>
                <code>/api/servers</code>
                <p>List all servers for authenticated user</p>
            </div>

            <div class="endpoint">
                <span class="method post">POST</span>
                <code>/api/servers/:id/start</code>
                <p>Start a specific game server</p>
            </div>

            <div class="endpoint">
                <span class="method post">POST</span>
                <code>/api/servers/:id/command</code>
                <p>Send console command to server</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span>
                <code>/api/files/server/:id</code>
                <p>Browse server files and directories</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span>
                <code>/api/nodes</code>
                <p>List all nodes (admin only)</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span>
                <code>/health</code>
                <p>Health check endpoint</p>
            </div>
        </div>

        <div class="api-section">
            <h2>WebSocket Events</h2>
            <p>Real-time communication via Socket.IO:</p>
            <ul>
                <li><code>server:output</code> - Live console output from servers</li>
                <li><code>server:stats</code> - Real-time server resource statistics</li>
                <li><code>server:status</code> - Server status change notifications</li>
                <li><code>server:command</code> - Send commands to server console</li>
            </ul>
        </div>

        <div class="api-section">
            <h2>Quick Start</h2>
            <p>Get started with the Game Panel API:</p>
            <ol>
                <li>Obtain a JWT token by logging in via <code>POST /api/auth/login</code></li>
                <li>Include the token in the Authorization header: <code>Bearer &lt;token&gt;</code></li>
                <li>Make requests to any protected endpoint</li>
                <li>Connect to WebSocket for real-time updates</li>
            </ol>
        </div>

        <div class="footer">
            <p>Game Panel v1.0.0 | Built with Node.js, TypeScript & Docker</p>
            <p>Visit <a href="https://github.com/your-org/game-panel">GitHub Repository</a> for documentation</p>
        </div>
    </div>

    <script>
        // Simple JavaScript for API status
        fetch('/health')
            .then(response => response.json())
            .then(data => {
                console.log('API Health:', data);
            })
            .catch(error => {
                console.error('API Error:', error);
            });

        // Example of connecting to WebSocket
        // const socket = io();
        // socket.on('connect', () => {
        //     console.log('Connected to Game Panel WebSocket');
        // });
    </script>
</body>
</html>
