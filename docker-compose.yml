version: '3.8'

services:
  # Main application service
  ctrl-alt-play:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-3000}
      - DATABASE_URL=${DATABASE_URL}
      - DB_TYPE=${DB_TYPE:-postgresql}
      - DB_LOCAL=${DB_LOCAL:-true}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=debug
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./plugins:/app/plugins
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "src/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis cache service
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL database service (enabled when DB_TYPE=postgresql)
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-ctrlaltplay}
      POSTGRES_USER: ${DB_USER:-ctrlaltplay}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256'
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-ctrlaltplay}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MySQL database service (enabled when DB_TYPE=mysql)
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: ${DB_NAME:-ctrlaltplay}
      MYSQL_USER: ${DB_USER:-root}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - mysql

  # MariaDB database service (enabled when DB_TYPE=mariadb)
  mariadb:
    image: mariadb:10.11
    environment:
      MARIADB_DATABASE: ${DB_NAME:-ctrlaltplay}
      MARIADB_USER: ${DB_USER:-root}
      MARIADB_PASSWORD: ${DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mariadb_data:/var/lib/mysql
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - mariadb

  # MongoDB database service (enabled when DB_TYPE=mongodb)
  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_DATABASE: ${DB_NAME:-ctrlaltplay}
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - mongodb

volumes:
  redis_data:
  postgres_data:
  mysql_data:
  mariadb_data:
  mongodb_data:
