import { PrismaClient, Server, ServerStatus, Prisma } from '@prisma/client';
import { logger } from '../utils/logger';
import { AgentService } from './agentService';
import { createError } from '../middlewares/errorHandler';

export interface CreateServerData {
  name: string;
  description?: string;
  userId: string;
  eggId: string;
  nodeId: string;
  memory: number;
  disk: number;
  cpu: number;
  swap?: number;
  io?: number;
  threads?: string;
  image: string;
  startup: string;
  environment: Record<string, any>;
  databaseLimit?: number;
  allocationLimit?: number;
  backupLimit?: number;
  externalId?: string;
  skipScripts?: boolean;
  oomKiller?: boolean;
  allocation: {
    ip: string;
    port: number;
  };
  additionalAllocations?: Array<{
    ip: string;
    port: number;
  }>;
}

export interface UpdateServerData {
  name?: string;
  description?: string;
  memory?: number;
  disk?: number;
  cpu?: number;
  swap?: number;
  io?: number;
  threads?: string;
  image?: string;
  startup?: string;
  environment?: Record<string, any>;
  databaseLimit?: number;
  allocationLimit?: number;
  backupLimit?: number;
  oomKiller?: boolean;
}

export interface ServerFilters {
  uuid?: string;
  uuidShort?: string;
  name?: string;
  description?: string;
  image?: string;
  externalId?: string;
  userId?: string;
  nodeId?: string;
  status?: ServerStatus;
}

export class ServerService {
  constructor(
    private prisma: PrismaClient,
    private agentService: AgentService
  ) {}

  /**
   * Get all servers with optional filtering and pagination
   */
  async getServers(
    filters: ServerFilters = {},
    page: number = 1,
    perPage: number = 50,
    include: Prisma.ServerInclude = {}
  ) {
    const where: Prisma.ServerWhereInput = {};

    // Apply filters
    if (filters.uuid) where.uuid = { contains: filters.uuid, mode: 'insensitive' };
    if (filters.uuidShort) where.uuidShort = { contains: filters.uuidShort, mode: 'insensitive' };
    if (filters.name) where.name = { contains: filters.name, mode: 'insensitive' };
    if (filters.description) where.description = { contains: filters.description, mode: 'insensitive' };
    if (filters.image) where.image = { contains: filters.image, mode: 'insensitive' };
    if (filters.externalId) where.externalId = filters.externalId;
    if (filters.userId) where.userId = filters.userId;
    if (filters.nodeId) where.nodeId = filters.nodeId;
    if (filters.status) where.status = filters.status;

    const [servers, total] = await Promise.all([
      this.prisma.server.findMany({
        where,
        include: {
          user: true,
          node: true,
          egg: true,
          allocation: true,
          allocations: true,
          databases: true,
          backups: true,
          ...include
        },
        skip: (page - 1) * perPage,
        take: perPage,
        orderBy: { createdAt: 'desc' }
      }),
      this.prisma.server.count({ where })
    ]);

    return {
      data: servers,
      pagination: {
        page,
        perPage,
        total,
        totalPages: Math.ceil(total / perPage)
      }
    };
  }

  /**
   * Get a single server by ID or UUID
   */
  async getServer(identifier: string, include: Prisma.ServerInclude = {}) {
    const server = await this.prisma.server.findFirst({
      where: {
        OR: [
          { id: identifier },
          { uuid: identifier },
          { uuidShort: identifier }
        ]
      },
      include: {
        user: true,
        node: true,
        egg: {
          include: {
            variables: true
          }
        },
        allocation: true,
        allocations: true,
        databases: true,
        backups: true,
        subusers: {
          include: {
            user: true
          }
        },
        schedules: {
          include: {
            tasks: true
          }
        },
        variables: {
          include: {
            eggVariable: true
          }
        },
        ...include
      }
    });

    if (!server) {
      throw createError('Server not found', 404);
    }

    return server;
  }

  /**
   * Create a new server
   */
  async createServer(data: CreateServerData) {
    return this.prisma.$transaction(async (tx) => {
      // Generate short UUID (first 8 characters)
      const fullUuid = this.generateUuid();
      const shortUuid = fullUuid.substring(0, 8);

      // Find or create primary allocation
      let allocation = await tx.allocation.findFirst({
        where: {
          ip: data.allocation.ip,
          port: data.allocation.port,
          nodeId: data.nodeId,
          serverId: null
        }
      });

      if (!allocation) {
        allocation = await tx.allocation.create({
          data: {
            ip: data.allocation.ip,
            port: data.allocation.port,
            nodeId: data.nodeId,
            isPrimary: true
          }
        });
      }

      // Create the server
      const server = await tx.server.create({
        data: {
          uuid: fullUuid,
          uuidShort: shortUuid,
          name: data.name,
          description: data.description,
          userId: data.userId,
          nodeId: data.nodeId,
          eggId: data.eggId,
          memory: data.memory,
          disk: data.disk,
          cpu: data.cpu,
          swap: data.swap || 0,
          io: data.io || 500,
          threads: data.threads,
          image: data.image,
          startup: data.startup,
          environment: data.environment,
          databaseLimit: data.databaseLimit || 0,
          allocationLimit: data.allocationLimit || 0,
          backupLimit: data.backupLimit || 0,
          externalId: data.externalId,
          skipScripts: data.skipScripts || false,
          oomKiller: data.oomKiller !== false,
          status: ServerStatus.INSTALLING
        },
        include: {
          user: true,
          node: true,
          egg: {
            include: {
              variables: true
            }
          },
          allocations: true
        }
      });

      // Update allocation to be assigned to this server
      await tx.allocation.update({
        where: { id: allocation.id },
        data: { serverId: server.id, isPrimary: true }
      });

      // Create additional allocations if specified
      if (data.additionalAllocations?.length) {
        for (const allocData of data.additionalAllocations) {
          let additionalAlloc = await tx.allocation.findFirst({
            where: {
              ip: allocData.ip,
              port: allocData.port,
              nodeId: data.nodeId,
              serverId: null
            }
          });

          if (!additionalAlloc) {
            additionalAlloc = await tx.allocation.create({
              data: {
                ip: allocData.ip,
                port: allocData.port,
                nodeId: data.nodeId
              }
            });
          }

          await tx.allocation.update({
            where: { id: additionalAlloc.id },
            data: { serverId: server.id }
          });
        }
      }

      // Create default server variables from egg variables
      const eggVariables = await tx.eggVariable.findMany({
        where: { eggId: data.eggId }
      });

      for (const eggVar of eggVariables) {
        const value = data.environment[eggVar.envVariable] || eggVar.defaultValue;
        await tx.serverVariable.create({
          data: {
            serverId: server.id,
            eggVariableId: eggVar.id,
            variableValue: value
          }
        });
      }

      logger.info(`Server created: ${server.name} (${server.uuid})`);

      // Notify agent to create the server
      try {
        await this.agentService.createServer(server.node.fqdn, {
          serverId: server.uuid,
          image: server.image,
          startup: server.startup,
          environment: server.environment as Record<string, any>,
          limits: {
            memory: server.memory,
            swap: server.swap,
            disk: server.disk,
            io: server.io,
            cpu: server.cpu
          }
        });
      } catch (error) {
        logger.error('Failed to create server on agent:', error);
        // Update server status to installation failed
        await tx.server.update({
          where: { id: server.id },
          data: { status: ServerStatus.INSTALL_FAILED }
        });
      }

      return server;
    });
  }

  /**
   * Update an existing server
   */
  async updateServer(identifier: string, data: UpdateServerData) {
    const server = await this.getServer(identifier);

    const updatedServer = await this.prisma.server.update({
      where: { id: server.id },
      data: {
        ...data,
        updatedAt: new Date()
      },
      include: {
        user: true,
        node: true,
        egg: true,
        allocation: true
      }
    });

    logger.info(`Server updated: ${updatedServer.name} (${updatedServer.uuid})`);

    // Notify agent about the update if necessary
    if (data.memory || data.disk || data.cpu || data.swap || data.io) {
      try {
        await this.agentService.updateServer(server.node.fqdn, server.uuid, {
          limits: {
            memory: updatedServer.memory,
            swap: updatedServer.swap,
            disk: updatedServer.disk,
            io: updatedServer.io,
            cpu: updatedServer.cpu
          }
        });
      } catch (error) {
        logger.error('Failed to update server on agent:', error);
      }
    }

    return updatedServer;
  }

  /**
   * Delete a server
   */
  async deleteServer(identifier: string, force: boolean = false) {
    const server = await this.getServer(identifier);

    if (!force && server.status === ServerStatus.RUNNING) {
      throw createError('Cannot delete a running server. Stop it first or use force delete.', 400);
    }

    await this.prisma.$transaction(async (tx) => {
      // Free up allocations
      await tx.allocation.updateMany({
        where: { serverId: server.id },
        data: { serverId: null, isPrimary: false }
      });

      // Delete the server
      await tx.server.delete({
        where: { id: server.id }
      });
    });

    logger.info(`Server deleted: ${server.name} (${server.uuid})`);

    // Notify agent to remove the server
    try {
      await this.agentService.deleteServer(server.node.fqdn, server.uuid);
    } catch (error) {
      logger.error('Failed to delete server on agent:', error);
    }

    return { success: true };
  }

  /**
   * Suspend a server
   */
  async suspendServer(identifier: string) {
    const server = await this.getServer(identifier);

    const updatedServer = await this.prisma.server.update({
      where: { id: server.id },
      data: { suspended: true, status: ServerStatus.SUSPENDED }
    });

    // Notify agent to suspend the server
    try {
      await this.agentService.suspendServer(server.node.fqdn, server.uuid);
    } catch (error) {
      logger.error('Failed to suspend server on agent:', error);
    }

    logger.info(`Server suspended: ${server.name} (${server.uuid})`);
    return updatedServer;
  }

  /**
   * Unsuspend a server
   */
  async unsuspendServer(identifier: string) {
    const server = await this.getServer(identifier);

    const updatedServer = await this.prisma.server.update({
      where: { id: server.id },
      data: { suspended: false, status: ServerStatus.OFFLINE }
    });

    // Notify agent to unsuspend the server
    try {
      await this.agentService.unsuspendServer(server.node.fqdn, server.uuid);
    } catch (error) {
      logger.error('Failed to unsuspend server on agent:', error);
    }

    logger.info(`Server unsuspended: ${server.name} (${server.uuid})`);
    return updatedServer;
  }

  /**
   * Reinstall a server
   */
  async reinstallServer(identifier: string) {
    const server = await this.getServer(identifier, {
      egg: {
        include: {
          variables: true
        }
      }
    });

    const updatedServer = await this.prisma.server.update({
      where: { id: server.id },
      data: { status: ServerStatus.INSTALLING, installedAt: null }
    });

    // Notify agent to reinstall the server
    try {
      await this.agentService.reinstallServer(server.node.fqdn, server.uuid);
    } catch (error) {
      logger.error('Failed to reinstall server on agent:', error);
      await this.prisma.server.update({
        where: { id: server.id },
        data: { status: ServerStatus.INSTALL_FAILED }
      });
    }

    logger.info(`Server reinstall initiated: ${server.name} (${server.uuid})`);
    return updatedServer;
  }

  /**
   * Generate a UUID for servers
   */
  private generateUuid(): string {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }
}
