name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ctrlaltplay_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint || echo "Linter not configured"

    - name: Run TypeScript check
      run: npx tsc --noEmit

    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ctrlaltplay_test
        JWT_SECRET: test-jwt-secret-key-for-ci
        AGENT_SECRET: test-agent-secret-key-for-ci
        PORT: 3001

    - name: Generate test coverage
      run: npm run test:coverage || npm test -- --coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ctrlaltplay_test
        JWT_SECRET: test-jwt-secret-key-for-ci
        AGENT_SECRET: test-agent-secret-key-for-ci

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Build Docker image
      run: docker build -t ctrl-alt-play-panel:${{ github.sha }} .

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 3000:3000 \
          -e NODE_ENV=test \
          -e JWT_SECRET=test-secret \
          -e AGENT_SECRET=test-agent-secret \
          ctrl-alt-play-panel:${{ github.sha }}
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        docker stop test-container

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for vulnerabilities
      run: npx audit-ci --moderate

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here
        echo "Staging deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
        echo "Production deployment completed"

  agent-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies (Agent)
      run: |
        cd agent
        npm ci

    - name: Run Agent tests
      run: |
        cd agent
        npm test || echo "Agent tests not yet implemented"

    - name: Build Agent
      run: |
        cd agent
        npm run build || echo "Agent build script not yet configured"

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test, agent-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ctrlaltplay_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Agent dependencies
      run: |
        cd agent
        npm ci

    - name: Start Panel service
      run: |
        npm run build
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ctrlaltplay_integration
        JWT_SECRET: test-jwt-secret-for-integration
        AGENT_SECRET: test-agent-secret-for-integration
        PORT: 3000

    - name: Start Agent service
      run: |
        cd agent
        npm run build || echo "Agent build not configured"
        npm start &
        sleep 5
      env:
        NODE_ENV: test
        PANEL_URL: http://localhost:3000
        AGENT_SECRET: test-agent-secret-for-integration
        NODE_ID: test-node-integration

    - name: Run integration tests
      run: |
        npm run test:integration || echo "Integration tests not yet implemented"
        curl -f http://localhost:3000/health
        curl -f http://localhost:3000/api/agents || echo "Agents endpoint test"

    - name: Cleanup
      run: |
        pkill -f "npm start" || true
        pkill -f "node" || true
