name: Ctrl-Alt-Play Panel CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Environment-agnostic testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
        test-type: [unit, integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        npm install --only=dev
        
    - name: Setup test environment
      run: |
        cp .env.test .env
        echo "NODE_ENV=test" >> .env
        echo "GITHUB_ACTIONS=true" >> .env
        
    - name: Generate Prisma client (test mode)
      run: |
        # Use test database URL for Prisma generation
        echo "DATABASE_URL=file:./test.db" >> .env
        npx prisma generate
        
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        npm run test:unit
        
    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        npm run test:integration
        
    - name: Generate test coverage
      if: matrix.node-version == '18' && matrix.test-type == 'unit'
      run: |
        npm run test:coverage
        
    - name: Upload coverage to Codecov
      if: matrix.node-version == '18' && matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Build and test Docker image
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build test image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ctrl-alt-play:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        # Create test environment file
        cat > .env.docker.test << EOF
        NODE_ENV=test
        PORT=3000
        FRONTEND_PORT=3001
        AGENT_PORT=8080
        DATABASE_URL=file:./test.db
        JWT_SECRET=test-secret-key-for-github-actions
        AGENT_SECRET=test-agent-secret-key
        STEAM_API_ENABLED=false
        MARKETPLACE_ENABLED=false
        REDIS_ENABLED=false
        LOG_LEVEL=error
        EOF
        
        # Test image startup and health check
        docker run -d --name test-container \
          --env-file .env.docker.test \
          -p 3000:3000 \
          ctrl-alt-play:test
          
        # Wait for container to be ready
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:3000/health || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Run npm audit
      run: |
        npm audit --audit-level=high
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Cross-platform compatibility test
  cross-platform:
    name: Cross-Platform Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test environment (Unix)
      if: runner.os != 'Windows'
      run: |
        cp .env.test .env
        echo "GITHUB_ACTIONS=true" >> .env
        
    - name: Setup test environment (Windows)
      if: runner.os == 'Windows'
      run: |
        copy .env.test .env
        echo GITHUB_ACTIONS=true >> .env
        
    - name: Run basic tests
      run: npm run test -- --passWithNoTests
      
    - name: Test port management
      run: node test-port-management.js

  # Deployment readiness check
  deployment-ready:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test, docker-test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Validate deployment configuration
      run: |
        # Check required environment template exists
        [ -f .env.production.template ] || exit 1
        
        # Check Docker configuration
        [ -f Dockerfile ] || exit 1
        [ -f docker-compose.yml ] || exit 1
        
        # Check health check script
        [ -f src/health-check.js ] || exit 1
        
        # Validate package.json scripts
        node -e "
          const pkg = require('./package.json');
          const required = ['dev', 'build', 'start', 'test'];
          const missing = required.filter(s => !pkg.scripts[s]);
          if (missing.length) {
            console.error('Missing scripts:', missing.join(', '));
            process.exit(1);
          }
          console.log('âœ… All required scripts present');
        "
        
    - name: Generate deployment artifact
      run: |
        # Create deployment package
        mkdir -p deployment-artifacts
        
        # Copy essential files
        cp .env.production.template deployment-artifacts/
        cp Dockerfile deployment-artifacts/
        cp docker-compose.yml deployment-artifacts/
        cp package*.json deployment-artifacts/
        
        # Create deployment guide
        cat > deployment-artifacts/DEPLOY.md << 'EOF'
        # Ctrl-Alt-Play Panel Deployment Guide
        
        ## Quick Deploy
        1. Copy `.env.production.template` to `.env.production`
        2. Configure environment variables in `.env.production`
        3. Run: `docker-compose up -d`
        
        ## Environment Variables Required
        - JWT_SECRET (generate with: openssl rand -base64 64)
        - AGENT_SECRET (generate with: openssl rand -base64 32)
        - DATABASE_URL (PostgreSQL connection string)
        - STEAM_API_KEY (optional, for Workshop integration)
        
        ## Health Check
        - HTTP: http://localhost:3000/health
        - Docker: docker-compose exec ctrl-alt-play node dist/health-check.js
        
        Tested on: $(date)
        Commit: ${{ github.sha }}
        EOF
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-artifacts/
        retention-days: 30

  # Auto-deployment to staging (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: deployment-ready
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deployment to staging would happen here"
        echo "This is a placeholder for your staging deployment process"
        echo "Environment: staging"
        # Add your deployment commands here
