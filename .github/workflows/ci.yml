name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: ctrl_alt_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci && cd ..

      - name: Environment setup
        run: |
          cp .env.example .env
          echo "NODE_ENV=test" >> .env
          echo "JWT_SECRET=test-secret-key" >> .env
          echo 'DATABASE_URL="postgresql://test:test@localhost:5432/ctrl_alt_test"' >> .env
          echo 'REDIS_URL="redis://localhost:6379"' >> .env

      - name: Setup database
        run: |
          npm run db:push
          npm run db:seed

      - name: Run linting
        run: |
          npm run lint || echo "Backend linting completed with warnings/errors"
          cd frontend && npm run lint || echo "Frontend linting completed with warnings/errors"
          cd ..

      - name: Type checking
        run: |
          npm run type-check
          cd frontend && npm run type-check && cd ..

      - name: Run tests
        run: |
          npm test -- --coverage --testPathPattern="tests/(integration|api)"
          npm run test:unit

      - name: Build applications
        run: |
          npm run build
          cd frontend && npm run build && cd ..

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci && cd ..

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          cd frontend && npm audit --audit-level=moderate && cd ..

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Panel Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ctrl-alt-play-panel:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose
        run: |
          cp .env.example .env
          docker compose -f docker-compose.test.yml up -d postgres redis
          sleep 10
          docker compose -f docker-compose.test.yml down

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: Deploy to staging environment
        run: |
          echo "üöÄ Deploying to staging environment"
          echo "This would trigger staging deployment"

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.security.result == 'success' && needs.docker.result == 'success'
        run: |
          echo "‚úÖ All checks passed successfully!"
          
      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.docker.result == 'failure'
        run: |
          echo "‚ùå Some checks failed. Please review the logs."
          exit 1
