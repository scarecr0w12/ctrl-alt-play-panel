name: Create Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci && cd ..
          cd agent && npm ci && cd ..

      - name: Run tests
        run: |
          npm test
          npm run type-check
          npm run lint

      - name: Build project
        run: |
          npm run build
          cd frontend && npm run build && cd ..
          cd agent && npm run build && cd ..

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract changelog for version
        id: changelog
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          # Extract the changelog section for this version
          awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
          
          # If no specific version found, use the latest unreleased section
          if [ ! -s release_notes.md ]; then
            awk "/^## \[Unreleased\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
          fi
          
          # Fallback to generic message if still empty
          if [ ! -s release_notes.md ]; then
            echo "Release $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See [CHANGELOG.md](./CHANGELOG.md) for detailed changes." >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
          generate_release_notes: true
          files: |
            README.md
            CHANGELOG.md
            CONTRIBUTING.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment status
        if: success()
        run: |
          echo "âœ… Release ${{ steps.get_version.outputs.VERSION }} created successfully"
          echo "ðŸ”— Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.VERSION }}"
